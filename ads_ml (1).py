# -*- coding: utf-8 -*-
"""ads_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12obBoijFJR3Y0mbsP5p57nDRA6fRwo0u
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

df = pd.read_csv('/content/advertising.csv')
df

df.rename(columns = {'Clicked on Ad':'Clicks'}, inplace = True)
df.rename(columns = {'Ad Topic Line':'Topic'}, inplace = True)
df.rename(columns = {'Daily Time Spent on Site':'Time_spent'}, inplace = True)
df.rename(columns = {'Daily Internet Usage':'Internet_usage'}, inplace = True)
df.rename(columns = {'Clicked on Ad':'Clicks'}, inplace = True)
df.rename(columns = {'Area Income':'Income'}, inplace = True)

df

inputs=df.drop(['Country','Topic','Income','City','Internet_usage','Timestamp','Clicks'],axis=1)
target=df['Clicks']

inputs

from sklearn.linear_model import LogisticRegression
from sklearn import metrics

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(inputs,target,test_size=0.3)

log_reg_model = LogisticRegression(solver='lbfgs', max_iter=1000)
log_reg_model.fit(X_train, y_train)
log_reg_pred = log_reg_model.predict(X_test)

Accuracy = metrics.accuracy_score(y_test, log_reg_pred)
Accuracy

log_reg_model.predict([[68.95,35,0]])

joblib.dump(log_reg_model, 'model.pkl')

from flask import Flask, request, jsonify
import joblib

app = Flask(__name__)

# Load the trained ML model
model = joblib.load('model.pkl')

@app.route('/predict', methods=['POST'])
def predict_click():
    try:
        # Get user input from the request
        data = request.get_json()
        Age = data['Age']
        Gender = data['Gender']
        Time_spent = data['Time_spent']

        # Perform prediction using the ML model
        prediction = model.predict([[Age, Gender, Time_spent]])

        # Return the prediction result
        return jsonify({'prediction': bool(prediction[0])})

    except Exception as e:
        return jsonify({'error': str(e)}), 400

if __name__ == '__main__':
    app.run(debug=True)